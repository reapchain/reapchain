// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reapchain/escrow/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/reapchain/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_reapchain_cosmos_sdk_types "github.com/reapchain/cosmos-sdk/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgConvertToNative struct {
	Coin   types.Coin `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin"`
	Sender string     `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgConvertToNative) Reset()         { *m = MsgConvertToNative{} }
func (m *MsgConvertToNative) String() string { return proto.CompactTextString(m) }
func (*MsgConvertToNative) ProtoMessage()    {}
func (*MsgConvertToNative) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c0fc6cc18824389, []int{0}
}
func (m *MsgConvertToNative) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConvertToNative) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConvertToNative.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConvertToNative) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConvertToNative.Merge(m, src)
}
func (m *MsgConvertToNative) XXX_Size() int {
	return m.Size()
}
func (m *MsgConvertToNative) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConvertToNative.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConvertToNative proto.InternalMessageInfo

func (m *MsgConvertToNative) GetCoin() types.Coin {
	if m != nil {
		return m.Coin
	}
	return types.Coin{}
}

func (m *MsgConvertToNative) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgConvertCoinResponse returns no fields
type MsgConvertToNativeResponse struct {
}

func (m *MsgConvertToNativeResponse) Reset()         { *m = MsgConvertToNativeResponse{} }
func (m *MsgConvertToNativeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgConvertToNativeResponse) ProtoMessage()    {}
func (*MsgConvertToNativeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c0fc6cc18824389, []int{1}
}
func (m *MsgConvertToNativeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConvertToNativeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConvertToNativeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConvertToNativeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConvertToNativeResponse.Merge(m, src)
}
func (m *MsgConvertToNativeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgConvertToNativeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConvertToNativeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConvertToNativeResponse proto.InternalMessageInfo

type MsgConvertToDenom struct {
	Amount github_com_reapchain_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/reapchain/cosmos-sdk/types.Int" json:"amount"`
	Denom  string                                    `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Sender string                                    `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgConvertToDenom) Reset()         { *m = MsgConvertToDenom{} }
func (m *MsgConvertToDenom) String() string { return proto.CompactTextString(m) }
func (*MsgConvertToDenom) ProtoMessage()    {}
func (*MsgConvertToDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c0fc6cc18824389, []int{2}
}
func (m *MsgConvertToDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConvertToDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConvertToDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConvertToDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConvertToDenom.Merge(m, src)
}
func (m *MsgConvertToDenom) XXX_Size() int {
	return m.Size()
}
func (m *MsgConvertToDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConvertToDenom.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConvertToDenom proto.InternalMessageInfo

func (m *MsgConvertToDenom) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgConvertToDenom) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgConvertERC20Response returns no fields
type MsgConvertToDenomResponse struct {
}

func (m *MsgConvertToDenomResponse) Reset()         { *m = MsgConvertToDenomResponse{} }
func (m *MsgConvertToDenomResponse) String() string { return proto.CompactTextString(m) }
func (*MsgConvertToDenomResponse) ProtoMessage()    {}
func (*MsgConvertToDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c0fc6cc18824389, []int{3}
}
func (m *MsgConvertToDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConvertToDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConvertToDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConvertToDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConvertToDenomResponse.Merge(m, src)
}
func (m *MsgConvertToDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgConvertToDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConvertToDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConvertToDenomResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgConvertToNative)(nil), "reapchain.escrow.v1.MsgConvertToNative")
	proto.RegisterType((*MsgConvertToNativeResponse)(nil), "reapchain.escrow.v1.MsgConvertToNativeResponse")
	proto.RegisterType((*MsgConvertToDenom)(nil), "reapchain.escrow.v1.MsgConvertToDenom")
	proto.RegisterType((*MsgConvertToDenomResponse)(nil), "reapchain.escrow.v1.MsgConvertToDenomResponse")
}

func init() { proto.RegisterFile("reapchain/escrow/v1/tx.proto", fileDescriptor_1c0fc6cc18824389) }

var fileDescriptor_1c0fc6cc18824389 = []byte{
	// 434 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xbf, 0x8f, 0xd3, 0x30,
	0x14, 0xc7, 0xe3, 0xde, 0x51, 0xe9, 0x8c, 0x04, 0xc2, 0x9c, 0xd0, 0x5d, 0xa8, 0x72, 0xa7, 0x0e,
	0xd0, 0x03, 0x61, 0x5f, 0xee, 0x16, 0xe6, 0x1e, 0x4b, 0x91, 0xca, 0x10, 0x31, 0xb1, 0x54, 0x4e,
	0x6a, 0xa5, 0x11, 0xc4, 0x2f, 0x8a, 0xdd, 0x50, 0x56, 0x66, 0x06, 0x24, 0x36, 0x06, 0xfe, 0x19,
	0x96, 0x8e, 0x95, 0x58, 0x10, 0x43, 0x85, 0x5a, 0xfe, 0x10, 0x14, 0x3b, 0xfd, 0x41, 0x5b, 0x89,
	0x6e, 0xcf, 0x79, 0x5f, 0x7f, 0xdf, 0x27, 0xdf, 0x67, 0xdc, 0xc8, 0x05, 0xcf, 0xa2, 0x01, 0x4f,
	0x24, 0x13, 0x2a, 0xca, 0xe1, 0x3d, 0x2b, 0x7c, 0xa6, 0x47, 0x34, 0xcb, 0x41, 0x03, 0xb9, 0xbf,
	0xec, 0x52, 0xdb, 0xa5, 0x85, 0xef, 0x36, 0x62, 0x80, 0xf8, 0x9d, 0x60, 0x3c, 0x4b, 0x18, 0x97,
	0x12, 0x34, 0xd7, 0x09, 0x48, 0x65, 0xaf, 0xb8, 0xc7, 0x31, 0xc4, 0x60, 0x4a, 0x56, 0x56, 0xd5,
	0x57, 0x2f, 0x02, 0x95, 0x82, 0x62, 0x21, 0x57, 0x82, 0x15, 0x7e, 0x28, 0x34, 0xf7, 0x59, 0x04,
	0x89, 0xb4, 0xfd, 0x26, 0xc7, 0xa4, 0xab, 0xe2, 0x1b, 0x90, 0x85, 0xc8, 0xf5, 0x6b, 0x78, 0xc5,
	0x75, 0x52, 0x08, 0x72, 0x8d, 0x0f, 0x4b, 0xcd, 0x09, 0x3a, 0x47, 0xad, 0xdb, 0x57, 0xa7, 0xd4,
	0x9a, 0xd0, 0xd2, 0x84, 0x56, 0x26, 0xf4, 0x06, 0x12, 0xd9, 0x3e, 0x1c, 0x4f, 0xcf, 0x9c, 0xc0,
	0x88, 0xc9, 0x03, 0x5c, 0x57, 0x42, 0xf6, 0x45, 0x7e, 0x52, 0x3b, 0x47, 0xad, 0xa3, 0xa0, 0x3a,
	0x35, 0x1b, 0xd8, 0xdd, 0x1e, 0x11, 0x08, 0x95, 0x81, 0x54, 0xa2, 0xf9, 0x09, 0xe1, 0x7b, 0xeb,
	0xed, 0x17, 0x42, 0x42, 0x4a, 0x3a, 0xb8, 0xce, 0x53, 0x18, 0x4a, 0x6d, 0x10, 0x8e, 0xda, 0x7e,
	0x39, 0xe7, 0xd7, 0xf4, 0xec, 0x22, 0x4e, 0xf4, 0x60, 0x18, 0xd2, 0x08, 0x52, 0xb6, 0x0a, 0xd0,
	0xe2, 0x3d, 0x53, 0xfd, 0xb7, 0x4c, 0x7f, 0xc8, 0x84, 0xa2, 0x1d, 0xa9, 0x83, 0xca, 0x80, 0x1c,
	0xe3, 0x5b, 0xfd, 0xd2, 0xb3, 0xa2, 0xb2, 0x87, 0x35, 0xd8, 0x83, 0x7f, 0x60, 0x1f, 0xe2, 0xd3,
	0x2d, 0x9a, 0x05, 0xeb, 0xd5, 0xf7, 0x1a, 0x3e, 0xe8, 0xaa, 0x98, 0x7c, 0x43, 0xf8, 0xee, 0x66,
	0x64, 0x8f, 0xe9, 0x8e, 0x95, 0xd1, 0xed, 0x1f, 0x77, 0xd9, 0x9e, 0xc2, 0x65, 0x42, 0xfe, 0xc7,
	0x1f, 0x7f, 0xbe, 0xd4, 0x9e, 0x92, 0x0b, 0xb6, 0xfb, 0xc9, 0xb0, 0xc8, 0x5e, 0xec, 0x69, 0xe8,
	0x49, 0x0b, 0xf3, 0x15, 0xe1, 0x3b, 0x1b, 0x89, 0x3e, 0xfa, 0xef, 0x58, 0xa3, 0x73, 0xe9, 0x7e,
	0xba, 0x25, 0xdd, 0xa5, 0xa1, 0x7b, 0x42, 0x5a, 0x7b, 0xd0, 0x99, 0xe8, 0xdb, 0x2f, 0xc7, 0x33,
	0x0f, 0x4d, 0x66, 0x1e, 0xfa, 0x3d, 0xf3, 0xd0, 0xe7, 0xb9, 0xe7, 0x4c, 0xe6, 0x9e, 0xf3, 0x73,
	0xee, 0x39, 0x6f, 0x2e, 0x77, 0x6e, 0x77, 0x55, 0x15, 0xcf, 0xd9, 0x68, 0x61, 0x6e, 0x16, 0x1d,
	0xd6, 0xcd, 0x2b, 0xbe, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x3c, 0xfe, 0xf4, 0x4e, 0x03,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	ConvertToNative(ctx context.Context, in *MsgConvertToNative, opts ...grpc.CallOption) (*MsgConvertToNativeResponse, error)
	ConvertToDenom(ctx context.Context, in *MsgConvertToDenom, opts ...grpc.CallOption) (*MsgConvertToDenomResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ConvertToNative(ctx context.Context, in *MsgConvertToNative, opts ...grpc.CallOption) (*MsgConvertToNativeResponse, error) {
	out := new(MsgConvertToNativeResponse)
	err := c.cc.Invoke(ctx, "/reapchain.escrow.v1.Msg/ConvertToNative", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConvertToDenom(ctx context.Context, in *MsgConvertToDenom, opts ...grpc.CallOption) (*MsgConvertToDenomResponse, error) {
	out := new(MsgConvertToDenomResponse)
	err := c.cc.Invoke(ctx, "/reapchain.escrow.v1.Msg/ConvertToDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	ConvertToNative(context.Context, *MsgConvertToNative) (*MsgConvertToNativeResponse, error)
	ConvertToDenom(context.Context, *MsgConvertToDenom) (*MsgConvertToDenomResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ConvertToNative(ctx context.Context, req *MsgConvertToNative) (*MsgConvertToNativeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertToNative not implemented")
}
func (*UnimplementedMsgServer) ConvertToDenom(ctx context.Context, req *MsgConvertToDenom) (*MsgConvertToDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertToDenom not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ConvertToNative_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConvertToNative)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConvertToNative(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reapchain.escrow.v1.Msg/ConvertToNative",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConvertToNative(ctx, req.(*MsgConvertToNative))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConvertToDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConvertToDenom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConvertToDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reapchain.escrow.v1.Msg/ConvertToDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConvertToDenom(ctx, req.(*MsgConvertToDenom))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "reapchain.escrow.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConvertToNative",
			Handler:    _Msg_ConvertToNative_Handler,
		},
		{
			MethodName: "ConvertToDenom",
			Handler:    _Msg_ConvertToDenom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reapchain/escrow/v1/tx.proto",
}

func (m *MsgConvertToNative) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConvertToNative) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConvertToNative) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgConvertToNativeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConvertToNativeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConvertToNativeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgConvertToDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConvertToDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConvertToDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgConvertToDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConvertToDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConvertToDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgConvertToNative) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Coin.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgConvertToNativeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgConvertToDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgConvertToDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgConvertToNative) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConvertToNative: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConvertToNative: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConvertToNativeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConvertToNativeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConvertToNativeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConvertToDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConvertToDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConvertToDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConvertToDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConvertToDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConvertToDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
